# Dotfiles management
# https://mitxela.com/projects/dotfiles_management

alias dotfiles='git --git-dir=$HOME/.dotfiles --work-tree=/'
alias dtig='GIT_DIR=$HOME/.dotfiles GIT_WORK_TREE=/ tig'

# Examples:
# dot status
dot(){
  if [[ "$#" -eq 0 ]]; then
    (cd /
    for i in $(dotfiles ls-files); do
      echo -n "$(dotfiles -c color.status=always status $i -s | sed "s#$i##")"
      echo -e "¬/$i¬\e[0;33m$(dotfiles -c color.ui=always log -1 --format="%s" -- $i)\e[0m"
    done
    ) | column -t --separator=¬ -T2
  else
    dotfiles $*
  fi
}

if [ $(uname) == "Linux" ]; then
  alias vim="nvim"
fi

# Utility
alias reload='source $HOME/.config/bash/aliases'
alias ea='vim $HOME/.config/bash/aliases && reload' # Edit aliases
alias ee="vim $HOME/.config/bash/env"
alias et="vim $HOME/.config/tmux/tmux.conf"
alias es="vim $HOME/.ssh/config"
alias vrc='vim $HOME/vimrc'
alias mutt="neomutt"

alias clock='tty-clock -cbt'

# Start calculator with math support
alias bc='bc -lq'

# Alternative cli tools:
# https://remysharp.com/2018/08/23/cli-improved
# \cat # ignore aliases named "cat" - explanation: https://stackoverflow.com/a/16506263/22617
# command cat # ignore functions and aliases
alias yt="youtube-dl --add-metadata -ic" # Download video link
alias yta="youtube-dl --add-metadata -xic" # Download only audio

# MacOS Specific Commands.
if [ $(uname) == "Darwin" ]; then
  alias marked='open -a Marked'

# command cat # ignore functions and aliases
  alias cat='bat'

# Hide/Show desktop.
  alias desktophide='defaults write com.apple.finder CreateDesktop false; killall Finder'
  alias desktopshow='defaults write com.apple.finder CreateDesktop true; killall Finder'

# Notify command
  alias notify="osascript -e 'tell app \"System Events\" to display alert \"Shell task\" message \"Task completed\"'"

  # Processes
  alias topu='top -o cpu' # cpu
  alias topp='top -o vsize' # memory
fi

alias preview="fzf --preview 'bat --color \"always\" {}'"

# add support for ctrl+o to open selected file in Vim
# export FZF_DEFAULT_OPTS="--bind='ctrl-o:execute(vim {})+abort'"
 export FZF_DEFAULT_OPTS=" \
 --color=bg+:#313244,bg:#1e1e2e,spinner:#f5e0dc,hl:#f38ba8 \
 --color=fg:#cdd6f4,header:#f38ba8,info:#cba6f7,pointer:#f5e0dc \
 --color=marker:#f5e0dc,fg+:#cdd6f4,prompt:#cba6f7,hl+:#f38ba8"

# P - sort by CPU
# M - sort by memory usage
# F4 - filter processes by string (to narrow to just "node" for instance)
# space - mark a single process so I can watch if the process is spiking
alias top='htop'

# Show disk space.
alias du='ncdu --color dark -rr -x --exclude .git --exclude node_modules'

alias help='tldr'

# Set the TERM of the remote machine to xterm-256. Needed for the italic local
# TERM I use.
alias ssh='TERM=xterm-256color ssh'

# Global ag ignore.
alias ag='ag --path-to-agignore=~/.agignore'

# Make cp more informative by default.
alias cp='cp -iv'
#
# Ask about deleting a file and make rm more informative by default.
alias rm='rm -iv'

# Recursive file diff that ignores dotfiles and is quiet.
alias rfilediff="diff -bur -x '.*'"

# Alias  pbcopy and pbpaste on Linux
if [ $(uname) == "Linux" ]; then
  alias pbcopy='xclip -sel c'
  alias pbpaste='xclip -selection clipboard -o'
fi

#Bret Terpstra
#copy the working directory path
if [ $(uname) == "Darwin" ]; then
  alias cpwd='pwd|tr -d "\n"|pbcopy'
fi

if [ $(uname) == "Linux" ]; then
  alias cpwd='pwd|tr -d "\n"|xclip -sel c'
fi

# Make file executable.
alias ax='chmod +x'

# Common -- Some are from Damian Conway
alias a='ls -A' # -A all except literal . ..
alias la="ls -A -l -G"
alias c='clear'
alias cdd='cd -'  # goto last dir cd'ed from
alias cl='clear; l'
function cdc() {
    cd $1; ls
}
alias cls='clear; ls'
alias h='history'

#share history between terminal sessions
alias he="history -a" # export history
alias hi="history -n" # import history

alias l.='ls -d .[^.]*'
alias l='ls -lhGt'  # -l long listing, most recent first
                    # -G color
alias lh="ls -lh"
alias ll='ls -lhG'  # -l long listing, human readable, no group info
alias lt='ls -lt' # sort with recently modified first
alias md='mkdir -p'
alias s='cd ..'   # up one dir

# ls with grep
function lg() {
    ls | grep $1
}

function take() {
    mkdir -p "$1"
    cd "$1"
}

# Aliases: rg
alias rg="rg --hidden --smart-case --glob='!.git/' --no-search-zip --trim --colors=line:fg:black --colors=line:style:bold --colors=path:fg:magenta --colors=match:style:nobold"

alias e='exit'
alias k9="kill -9"
function killnamed () {
    ps ax | grep $1 | cut -d ' ' -f 2 | xargs kill
}
# recursively zips all files in a directory. Example: $zipr nameofdirectory
function zipr() {
  zip -r $1.zip $1
}

# zips every files in your current directory with the current name of each file and deletes the the original file.
# Thanks to Steven Frank for this. http://stevenf.tumblr.com/post/1200983113/this-terminal-command-will-turn-every-file-in-the
alias zipall='for item in *; do zip -m "${item}.zip" "${item}"; done'

# Finder / Files
if [ $(uname) == "Darwin" ]; then
  alias o='open . &'
  alias ff='open -a Firefox'
  alias chrome='open -a Google\ Chrome'
  alias f='open .'
fi
if [ $(uname) == "Linux" ]; then
  alias o='xdg-open $1'
  alias f='xdg-open'
fi

# General code

if [ $(uname) == "Darwin" ]; then
  alias gcb="git branch | grep '^\*' | cut -d' ' -f2 | pbcopy"
fi

if [ $(uname) == "Linux" ]; then
  alias gcb="git branch | grep '^\*' | cut -d' ' -f2 | xclip -sel c"
fi

# Commit pending changes and quote all args as message
function gg() {
    git commit -v -a -m "$*"
}

# Git aliases 
alias g='git status'
alias ga-modified="git status | grep modified | cut -d':' -f2 | xargs git add"
alias ga='git add'
alias gap='ga --patch'
alias gb='git branch'
alias gba='git branch -a'
alias gc='git commit -v'
alias gca='gc --amend --no-edit'
alias gce='gc --amend'
alias gco='git checkout'
alias gcob='git checkout -b'
alias gcl='git clone --recursive'
alias gd='git diff'
alias gds='gd --staged'
alias gf='git fetch'
alias gi='git init'
alias gl='git log --graph --all --pretty=format:"%C(magenta)%h %C(white) %an  %ar%C(blue)  %D%n%s%n"'
alias gm='git merge'
alias gn='git checkout -b'  # new branch
alias gnp="git-notpushed"
alias gp='git push'
alias gr='git reset'
alias gs='git status --short'
alias gu='git pull'
alias gcp='git cherry-pick $1'

# Get and merge upstream repo
alias gups='git fetch upstream && git merge upstream/master'
alias eg='vim .git/config'
alias egg='vim ~/.gitconfig'

# Remove git from project
alias ungit="find . -name '.git' -exec rm -rf {} \;"

# Lists all merged branches and deletes the local branches
alias gclean="git branch --merged | grep -v -i -E 'master|main|develop|dev' | xargs -n 1 git branch -d"

function glg() {
  git log --author="$1" --decorate
}

function gi() {
  curl http://www.gitignore.io/api/$@ ;
}

# Tig
alias ts='tig status'

# Git clone from GitHub
function gch() {
  git clone git://github.com/$1/$2.git
}

# Setup a tracking branch from [remote] [branch_name]
# EXAMPLE gbt remote branch_name
function gbt() {
  git branch --track $2 $1/$2 && git checkout $2
}
# Quickly clobber a file and checkout
function grf() {
  rm $1
  git checkout $1
}
# Call from inside an initialized Git repo, with the name of the repo.
function new-git() {
  ssh git@example.com "mkdir $1.git && cd $1.git && git --bare init"
  git remote add origin git@example.com:$1.git
  git push origin master
  git config branch.master.remote origin
  git config branch.master.merge refs/heads/master
  git config push.default current
}

# Setup a tunnel
function haproxyssh() {
  ssh -L7997:127.0.0.1:7997 deploy@$1.com
}

function aiff2mp3() {
  lame -h -V 0 $1.aif $1.mp3
}
function wav2mp3() {
  lame -h -V 0 $1.wav $1.mp3
}

# From http://github.com/suztomo/dotfiles
function rmf(){
    for file in $*
    do
        __rm_single_file $file
    done
}

if [ $(uname) == "Darwin" ]; then
  TRASH_PATH='~/.Trash'
fi

if [ $(uname) == "Linux" ]; then
  TRASH_PATH='/home/'$USER'/.local/share/Trash'
fi

function __rm_single_file(){
    if ! [ -d $TRASH_PATH/ ]
    then
        command /bin/mkdir $TRASH_PATH
    fi

    if ! [ $# -eq 1 ]
    then
        echo "__rm_single_file: 1 argument required but $# passed."
        exit
    fi

    if [ -e $1 ]
    then
        BASENAME=`basename $1`
        NAME=$BASENAME
        COUNT=0
        while [ -e $TRASH_PATH/$NAME ]
        do
            COUNT=$(($COUNT+1))
            NAME="$BASENAME.$COUNT"
        done

        command /bin/mv $1 $TRASH_PATH/$NAME
    else
        echo "No such file or directory: $file"
    fi
}

# Get readable list of network IPs
alias ips="ifconfig -a | perl -nle'/(\d+\.\d+\.\d+\.\d+)/ && print $1'"
alias myip="dig +short myip.opendns.com @resolver1.opendns.com"

# l(ist)ips Get local and WAN IP adddresses
# $ lips
#    Local IP: 10.0.1.4
# External IP: 41.32.11.102
lips() {
    local ip=`ifconfig en0 | grep "inet " | grep -v 127.0.0.1 | awk '{print $2}'`
    local locip extip

    [ "$ip" != "" ] && locip=$ip || locip="inactive"

    ip=`dig +short myip.opendns.com @resolver1.opendns.com`
    [ "$ip" != "" ] && extip=$ip || extip="inactive"

    printf '%11s: %s\n%11s: %s\n' "Local IP" $locip "External IP" $extip
}

# MacOS
if [ $(uname) == "Darwin" ]; then
  alias flush="dscacheutil -flushcache" # Flush DNS cache
  alias dns="networksetup -getdnsservers Wi-Fi" # See current nameservers.
  alias dnsclear="networksetup -setdnsservers Wi-Fi" # Clears out the custom DNS nameservers.
  alias dnslocal="sudo networksetup -setdnsservers Wi-Fi 10.10.10.21"
  alias dnsgoogle="sudo networksetup -setdnsservers Wi-Fi 8.8.8.8 8.8.4.4"
  alias dnscloud="sudo networksetup -setdnsservers Wi-Fi 1.1.1.1 1.0.0.1 2606:4700:4700::1111 2606:4700:4700::1001"
  alias dnsopen="sudo networksetup -setdnsservers Wi-Fi 208.67.222.222 208.67.220.220"
  alias dnsunlocator="sudo networksetup -setdnsservers Wi-Fi 185.37.37.37 185.37.39.39"
  alias dnsadfree="sudo networksetup -setdnsservers Wi-Fi 192.169.71.180 192.254.74.201 208.110.81.51"
# 178.32.187.10
# 88.150.150.211
# 78.46.231.161
fi
if [ $(uname) == "Linux" ]; then
  alias flush="resolvectl flush-caches" # Flush DNS cache
fi

alias dnscloud="sudo networksetup -setdnsservers Wi-Fi 1.1.1.1 1.0.0.1"
alias speedtest='wget -O /dev/null http://speedtest.wdc01.softlayer.com/downloads/test10.zip'
alias vpnfix="sudo ifconfig en0 down && sudo route flush && sudo ifconfig en0 up"

alias gzip="gzip -9n" # set strongest compression level as ‘default’ for gzip
alias ping="ping -c 5" # ping 5 times ‘by default’
alias ql="qlmanage -p 2>/dev/null" # preview a file using QuickLook

# Open notes in Vim
alias notes='cd ~/notes;vim .'

# USB hardware
if [ $(uname) == "Darwin" ]; then
  alias usb='system_profiler SPUSBDataType'
fi

# Find Raspberry Pi on network. Does not work for Pi4
alias findpi='arp -na | grep -i b8:27:eb'

# Networking
alias hosts='sudo vim /private/etc/hosts'
alias dnsconf='sudo vim /usr/local/etc/dnsmasq.conf'

if [ $(uname) == "Darwin" ]; then
  alias dnsreload='sudo launchctl unload -w /System/Library/LaunchDaemons/com.apple.mDNSResponder.plist && sudo launchctl load -w /System/Library/LaunchDaemons/com.apple.mDNSResponder.plist'
fi
alias wifi="networksetup -setairportpower en1"

#fzf stuff

# tm - create new tmux session, or switch to existing one. Works from within tmux too. (@bag-man)
# `tm` will allow you to select your tmux session via fzf.
# `tm irc` will attach to the irc session (if it exists), else it will create it.
function tm() {
  [[ -n "$TMUX" ]] && change="switch-client" || change="attach-session"
  if [ $1 ]; then
    tmux $change -t "$1" 2>/dev/null || (tmux new-session -d -s $1 && tmux $change -t "$1"); return
  fi
  session=$(tmux list-sessions -F "#{session_name}" 2>/dev/null | fzf --exit-0) &&  tmux $change -t "$session" || echo "No sessions found."
}

# fs [FUZZY PATTERN] - Select selected tmux session
#   - Bypass fuzzy finder if there's only one match (--select-1)
#   - Exit if there's no match (--exit-0)
fs() {
  local session
  session=$(tmux list-sessions -F "#{session_name}" | \
    fzf --query="$1" --select-1 --exit-0) &&
  tmux switch-client -t "$session"
}

# fbr - checkout git branch (including remote branches), sorted by most recent commit, limit 30 last branches
fbr() {
  local branches branch
  branches=$(git for-each-ref --count=30 --sort=-committerdate refs/heads/ --format="%(refname:short)") &&
  branch=$(echo "$branches" |
           fzf-tmux -d $(( 2 + $(wc -l <<< "$branches") )) +m) &&
  git checkout $(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")
}

# Docker

alias dps='docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"'
alias dl='docker logs --tail=100'
alias dc='docker compose'

if [ $(uname) == "Darwin" ]; then
  alias startdocker='open --hide --background -a Docker && sleep 10'
  alias quitdocker="osascript -e 'quit app \"Docker\"'"
fi

if [ $(uname) == "Linux" ]; then
  alias startdocker='sudo systemctl start docker'
  alias stopdocker='sudo systemctl stop docker'
fi

# Tail last 50 lines of docker logs
alias dtail='docker logs -tf --tail='50' '

# Shorthand, customise docker-compose.yaml location as needed
alias dcp='docker-compose -f ~/docker-compose.yaml '

# Remove unused images (useful after an upgrade)
alias dprune='docker image prune'

# Remove unused images, unused networks *and data* (use with care)
alias dprunesys='docker system prune --all'

# Aliases: pass
alias pa='pass'
alias pac='pass -c'
alias po='pass otp'
alias poc='pass otp -c'
alias pg='openssl rand -base64 33'

# Aliases: systemd
alias sd='sudo systemctl'
alias sdu='systemctl --user'
alias jd='journalctl --no-pager'

# Aliases: human-readable
alias cal='TZ=America/Los_Angeles cal --monday'
# alias du='du --human-readable'
alias free='free --human'

# Generate good passwords for DBs.
alias genpass='< /dev/urandom tr -dc 'A-Za-z0-9' | head -c 20'

# Man colors
man() {
  GROFF_NO_SGR=1 \
  LESS_TERMCAP_mb=$'\e[31m' \
  LESS_TERMCAP_md=$'\e[34m' \
  LESS_TERMCAP_me=$'\e[0m' \
  LESS_TERMCAP_se=$'\e[0m' \
  LESS_TERMCAP_so=$'\e[1;30m' \
  LESS_TERMCAP_ue=$'\e[0m' \
  LESS_TERMCAP_us=$'\e[35m' \
  command man "$@"
}

# Misc

startjournal() {
  now=$(date +"%Y-%m-%d")
  filename=journal-$now.md
  printf '# Journaling\n\n## What are you grateful for?\n\n-\n\n## What frustrated you today?\n\n-\n\n## What excited you today?\n\n-\n\n## 5 Love languages\n\n### Did you show acts of service to __ this week?\n\n### Did you speak Words of affirmation\n\n### Did you spend Quality time together?\n\n### Did you give gifts?\n\n### Did you show affection' > $filename
}

worklog() {
  today=$(date +"%Y-%m-%d")
  filename=worklog-$today.md
  touch $filename
  echo "Created $filename"
}


# Syntax check Javascript
function jsc() {
  jsl -conf /etc/jsl/jsl.conf -process $1
}

alias nr='npm run'

# Automatically call nvmuse
# https://github.com/creationix/nvm#deeper-shell-integration
find-up () {
    path=$(pwd)
    while [[ "$path" != "" && ! -e "$path/$1" ]]; do
        path=${path%/*}
    done
    echo "$path"
}

cdnvm(){
    cd "$@";
    nvm_path=$(find-up .nvmrc | tr -d '[:space:]')

    # If there are no .nvmrc file, use the default nvm version
    if [[ ! $nvm_path = *[^[:space:]]* ]]; then

        declare default_version;
        default_version=$(nvm version default);

        # If there is no default version, set it to `node`
        # This will use the latest version on your machine
        if [[ $default_version == "N/A" ]]; then
            nvm alias default node;
            default_version=$(nvm version default);
        fi

        # If the current version is not the default version, set it to use the default version
        if [[ $(nvm current) != "$default_version" ]]; then
            nvm use default;
        fi

        elif [[ -s $nvm_path/.nvmrc && -r $nvm_path/.nvmrc ]]; then
        declare nvm_version
        nvm_version=$(<"$nvm_path"/.nvmrc)

        # Add the `v` suffix if it does not exists in the .nvmrc file
        if [[ $nvm_version != v* ]]; then
            nvm_version="v""$nvm_version"
        fi

        # If it is not already installed, install it
        if [[ $(nvm ls "$nvm_version" | tr -d '[:space:]') == "N/A" ]]; then
            nvm install "$nvm_version";
        fi

        if [[ $(nvm current) != "$nvm_version" ]]; then
            nvm use "$nvm_version";
        fi
    fi
}
alias cd='cdnvm'

# Launch OBS with flatpak and 1.5 scaling
alias obs='export QT_SCALE_FACTOR=1.5 && flatpak run com.obsproject.Studio'

# Weather from current city. CITY should be set in ~/.bash_profile
alias weather="curl 'https://wttr.in/${CITY}?format=2' -s"
alias weatherweek="curl 'https://wttr.in/${CITY}' -s"

# Yazi function
function yy() {
	local tmp="$(mktemp -t "yazi-cwd.XXXXXX")"
	yazi "$@" --cwd-file="$tmp"
	if cwd="$(cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
		cd -- "$cwd"
	fi
	rm -f -- "$tmp"
}

# Create a desktop launcher for a web app
# Copied from Omarchy functions
# Add a web app like YouTube by running this command.
# web2app "YouTube" https://youtube.com/ https://cdn.jsdelivr.net/gh/homarr-labs/dashboard-icons/png/youtube.png
# Remove them by running 
# web2app-remove "YouTube"
web2app() {
  if [ "$#" -ne 3 ]; then
    echo "Usage: web2app <AppName> <AppURL> <IconURL> (IconURL must be in PNG -- use https://dashboardicons.com)"
    return 1
  fi

  local APP_NAME="$1"
  local APP_URL="$2"
  local ICON_URL="$3"
  local ICON_DIR="$HOME/.local/share/applications/icons"
  local DESKTOP_FILE="$HOME/.local/share/applications/${APP_NAME}.desktop"
  local ICON_PATH="${ICON_DIR}/${APP_NAME}.png"

  mkdir -p "$ICON_DIR"

  if ! curl -sL -o "$ICON_PATH" "$ICON_URL"; then
    echo "Error: Failed to download icon."
    return 1
  fi

  cat > "$DESKTOP_FILE" <<EOF
[Desktop Entry]
Version=1.0
Name=$APP_NAME
Comment=$APP_NAME
Exec=brave-browser --new-window --ozone-platform=wayland --app="$APP_URL" --name="$APP_NAME" --class="$APP_NAME"
Terminal=false
Type=Application
Icon=$ICON_PATH
StartupNotify=true
EOF

  chmod +x "$DESKTOP_FILE"
}

web2app-remove() {
  if [ "$#" -ne 1 ]; then
    echo "Usage: web2app-remove <AppName>"
    return 1
  fi

  local APP_NAME="$1"
  local ICON_DIR="$HOME/.local/share/applications/icons"
  local DESKTOP_FILE="$HOME/.local/share/applications/${APP_NAME}.desktop"
  local ICON_PATH="${ICON_DIR}/${APP_NAME}.png"

  rm "$DESKTOP_FILE"
  rm "$ICON_PATH"
}

# Edit local aliases
alias eal='vim ~/.alias_local'

# Include local and private aliases.
if [ -f ~/.alias_local ]; then
    source ~/.alias_local
fi
