# Command Enhancements 2010-09-28-1248

# alias vim="nvim"

# Utility
alias reload='source $HOME/bin/dotfiles/bash/aliases'
alias ea='vim $HOME/bin/dotfiles/bash/aliases && reload' # Edit aliases
alias ee="vim $HOME/bin/dotfiles/bash/env"
alias et="vim $HOME/bin/dotfiles/tmux/tmux.conf"
alias es="vim $HOME/.ssh/config"
alias vrc='vim $HOME/vimrc'
alias vnote="vim /Users/kepford/Dropbox/Notational\ Data/vim.md"

# Alternative cli tools:
# https://remysharp.com/2018/08/23/cli-improved
# \cat # ignore aliases named "cat" - explanation: https://stackoverflow.com/a/16506263/22617
# command cat # ignore functions and aliases
alias cat='bat'

alias preview="fzf --preview 'bat --color \"always\" {}'"

# add support for ctrl+o to open selected file in Vim
export FZF_DEFAULT_OPTS="--bind='ctrl-o:execute(vim {})+abort'"

# P - sort by CPU
# M - sort by memory usage
# F4 - filter processes by string (to narrow to just "node" for instance)
# space - mark a single process so I can watch if the process is spiking
alias top='htop'

# Hide/Show desktop.
alias desktophide='defaults write com.apple.finder CreateDesktop false; killall Finder'
alias desktopshow='defaults write com.apple.finder CreateDesktop true; killall Finder'

# Show disk space.
alias du='ncdu --color dark -rr -x --exclude .git --exclude node_modules'

alias help='tldr'

# Set the TERM of the remote machine to xterm-256. Needed for the italic local
# TERM I use.
alias ssh='TERM=xterm-256color ssh'

# Notify command
alias notify="osascript -e 'tell app \"System Events\" to display alert \"Shell task\" message \"Task completed\"'"

# Global ag ignore.
alias ag='ag --path-to-agignore=~/.agignore'

#Dash
function dash () {
  open dash://$1
}

#Bret Terpstra
#copy the working directory path
alias cpwd='pwd|tr -d "\n"|pbcopy'

# Make file executable.
alias ax='chmod +x'

# http://brettterpstra.com/2011/12/28/a-simple-but-handy-bash-function-console
function console () {
  if [[ $# > 0 ]]; then
    query=$(echo "$*"|tr -s ' ' '|')
    tail -f /var/log/system.log|grep -i --color=auto -E "$query"
  else
    tail -f /var/log/system.log
  fi
}

# Common -- Some are from Damian Conway
alias a='ls -A' # -A all except literal . ..
alias la="ls -A -l -G"
alias c='clear'
alias cdd='cd -'  # goto last dir cd'ed from
alias cl='clear; l'
function cdc() {
    cd $1; ls
}
alias cls='clear; ls'
alias h='history'

#share history between terminal sessions
alias he="history -a" # export history
alias hi="history -n" # import history

alias l.='ls -d .[^.]*'
alias l='ls -lhGt'  # -l long listing, most recent first
                    # -G color
alias lh="ls -lh"
alias ll='ls -lhG'  # -l long listing, human readable, no group info
alias lt='ls -lt' # sort with recently modified first
alias md='mkdir -p'
alias s='cd ..'   # up one dir

# ls with grep
function lg() {
    ls | grep $1
}

function take() {
    mkdir -p "$1"
    cd "$1"
}

alias e='exit'
alias k9="killall -9"
function killnamed () {
    ps ax | grep $1 | cut -d ' ' -f 2 | xargs kill
}
# recursively zips all files in a directory. Example: $zipr nameofdirectory
function zipr() {
  zip -r $1.zip $1
}

# zips every files in your current directory with the current name of each file and deletes the the original file.
# Thanks to Steven Frank for this. http://stevenf.tumblr.com/post/1200983113/this-terminal-command-will-turn-every-file-in-the
alias zipall='for item in *; do zip -m "${item}.zip" "${item}"; done'

# Finder
alias o='open . &'
alias ff='open -a Firefox'
alias chrome='open -a Google\ Chrome'
alias f='open .'

# General code

# Processes
alias topu='top -o cpu' # cpu
alias topp='top -o vsize' # memory

# Git
alias ungit="find . -name '.git' -exec rm -rf {} \;"
alias gb='git branch'
alias gba='git branch -a'
alias gc='git commit -v'
alias gca='git commit -v -a'
alias gf='git fetch'

# Commit pending changes and quote all args as message
function gg() {
    git commit -v -a -m "$*"
}
alias gco='git checkout'
alias gcod='git checkout develop'
alias gcob='git checkout -b'
alias gd='git diff'
alias gdm='git diff master'
function gdx() {
  git diff $1 $2 | gitx
}
alias gl='git pull'
# https://github.com/chrisk/git-extras
alias gnp="git-notpushed"
alias gp='git push'
alias g='git status'
alias ga-modified="git status | grep modified | cut -d':' -f2 | xargs git add"

# Get and merge upstream repo
alias gups='git fetch upstream && git merge upstream/master'
alias eg='vim .git/config'
alias egg='vim ~/.gitconfig'

# Lists all merged branches and deletes the local branchs
alias gclean="git branch --merged | grep -v -i -E 'master|develop' | xargs -n 1 git branch -d"

function glg() {
  git log --author="$1" --decorate
}

function gi() {
  curl http://www.gitignore.io/api/$@ ;
}

# Tig
alias ts='tig status'

# Git clone from GitHub
function gch() {
  git clone git://github.com/$1/$2.git
}

# Setup a tracking branch from [remote] [branch_name]
# EXAMPLE gbt remote branch_name
function gbt() {
  git branch --track $2 $1/$2 && git checkout $2
}
# Quickly clobber a file and checkout
function grf() {
  rm $1
  git checkout $1
}
# Call from inside an initialized Git repo, with the name of the repo.
function new-git() {
  ssh git@example.com "mkdir $1.git && cd $1.git && git --bare init"
  git remote add origin git@example.com:$1.git
  git push origin master
  git config branch.master.remote origin
  git config branch.master.merge refs/heads/master
  git config push.default current
}

#Git Flow
alias gff='git flow feature start'

## Open Drupal issue node
# http://chapterthree.com/blog/open-your-drupalorg-issue-automatically-your-git-repository
alias issue="open /Applications/Google\ Chrome.app https://www.drupal.org/node/\$(git symbolic-ref -q HEAD 2>/dev/null | sed 's/^refs\/heads\/\([0-9]*\).*/\1/')"

# Setup a tunnel
function haproxyssh() {
  ssh -L7997:127.0.0.1:7997 deploy@$1.com
}

# Syntax check Javascript
function jsc() {
  jsl -conf /etc/jsl/jsl.conf -process $1
}

alias nr='npm run'

function aiff2mp3() {
  lame -h -V 0 $1.aif $1.mp3
}
function wav2mp3() {
  lame -h -V 0 $1.wav $1.mp3
}

# Update Vhosts
alias vhost="sudo vim /etc/apache2/extra/httpd-vhosts.conf"

# Apache Restart
alias apacherestart="sudo apachectl -k restart"

# Nginx
# sudo $(brew --prefix)/sbin/nginx -s stop
function nginx_stop() {
  sudo nginx -s stop
}
function nginx_start() {
  sudo /usr/local/sbin/nginx
}
function nginx_reload() {
  sudo nginx -s reload
}

# Restart PHP56
alias phprestart="brew services restart php56"

# php-fpm
function php_stop() {
    ps ax | grep php-fpm | cut -d " " -f 1 | xargs sudo kill -9
}

# TaskPaper
function ntp() {
    touch $1.taskpaper
    vim $1.taskpaper
}

# [Create and] open project todo
# If you don't pass a name as an argument, it's pulled from the directory name
td() {
	if [[ -n $1 ]]; then
		proj=$1
		todofile=$proj.taskpaper
	else
		proj=${PWD##*/}
		todofile=$proj.taskpaper
		todofile=${todofile#.}
	fi
	if [ ! -e $todofile ]; then
		touch $todofile
		echo -e "Inbox:\n$proj:\n\tNew Features:\n\tIdeas:\n\tBugs:\nArchive:\nSearch Definitions:\n\tTop Priority @search(@priority = 5 and not @done)\n\tHigh Priority @search(@priority > 3 and not @done)\n\tMaybe @search(@maybe)\n\tNext @search(@na and not @done and not project = \"Archive\")\n" >> $todofile
	fi
	vim $todofile
}

# From http://github.com/suztomo/dotfiles
function rmf(){
    for file in $*
    do
        __rm_single_file $file
    done
}

function __rm_single_file(){
    if ! [ -d ~/.Trash/ ]
    then
        command /bin/mkdir ~/.Trash
    fi

    if ! [ $# -eq 1 ]
    then
        echo "__rm_single_file: 1 argument required but $# passed."
        exit
    fi

    if [ -e $1 ]
    then
        BASENAME=`basename $1`
        NAME=$BASENAME
        COUNT=0
        while [ -e ~/.Trash/$NAME ]
        do
            COUNT=$(($COUNT+1))
            NAME="$BASENAME.$COUNT"
        done

        command /bin/mv $1 ~/.Trash/$NAME
    else
        echo "No such file or directory: $file"
    fi
}

# Drupal Directories for my themes, modules, features, and drush make files.

alias d='drupal'
alias dca='drush cc all'
alias dr='drush cr'
alias dfr='drush fra -y && drush cc all'
alias dfl='drush fl'
alias duli='drush uli'

# Download Drupal 8 with git
function gitd() {
  git clone --branch $1 https://git.drupal.org/project/drupal.git $2; cd $2
}

alias d8upgrade='composer update drupal/core webflo/drupal-core-require-dev "symfony/*" --with-dependencies'

# Quick-Drupal install
# By default this function installs the demo_umami profile but you can pass any
# core profile you like as an arguement
# Example: quickdrupal standard
function quickdrupal() {
  PROFILE=${1:-demo_umami}
  mkdir quickdrupal && cd quickdrupal && curl -sSL https://www.drupal.org/download-latest/tar.gz | tar -xz --strip-components=1
  php core/scripts/drupal quick-start $PROFILE
}

# Create db for new Drupal site.
function ddb() {
  mysql -u root -p -e "CREATE DATABASE $1 CHARACTER SET utf8 COLLATE utf8_general_ci;"
}

# Import a compressed database using Drush.
function dimport() {
  echo "Dropping current database."
  drush sql-drop
  echo "Importing database from $1"
  gunzip -c $1 | drush sqlc
  echo "Database imported. Rebuiling registry now."
  drush rr
  echo "unblocking user ID 1"
  drush uublk 1
  echo "Logging you in now."
  drush uli
}

# Code sniffer.
alias drupalcs='phpcs --standard=/Users/kepford/.composer/vendor/drupal/coder/coder_sniffer/Drupal --'
alias drupalcsfix="phpcbf --standard=Drupal â€”extensions=php,module,inc,install,test,profile,theme,js,css,info,txt,md"
alias themes='cd ~/Dropbox/drupal/themes/' #goto the themes folder
alias modules='cd ~/Dropbox/drupal/modules/' #goto the modules folder
alias builds='cd ~/Dropbox/drupal/builds/' #goto the builds folder
alias profiles='cd ~/Dropbox/drupal/profiles/' #goto the profiles folder
alias repos='cd ~/Dropbox/repos/' #goto the repos folder
alias sites='cd ~/Sites' #goto the profiles folder
alias twd='cd ~/Dropbox/currentprojects/theweeklydrop' #goto theweeklydrop folder
alias grab="drush dl --package-handler=git_drupalorg --dev"

#Grunt
alias grunt='/usr/local/share/npm/bin/grunt'

# Go lang s search tool.
alias s="~/golang/bin/s"
alias sa="s -p amazon"
alias sw="s -p wikipedia"
alias si="s -p imdb"
alias ss="s -p stackoverflow"
alias sy="s -p youtube"

alias arduino="/Applications/Arduino.app/Contents/MacOS/Arduino"

# Get readable list of network IPs
alias ips="ifconfig -a | perl -nle'/(\d+\.\d+\.\d+\.\d+)/ && print $1'"
alias myip="dig +short myip.opendns.com @resolver1.opendns.com"

# l(ist)ips Get local and WAN IP adddresses
# $ lips
#    Local IP: 10.0.1.4
# External IP: 41.32.11.102
lips() {
    local ip=`ifconfig en0 | grep "inet " | grep -v 127.0.0.1 | awk '{print $2}'`
    local locip extip

    [ "$ip" != "" ] && locip=$ip || locip="inactive"

    ip=`dig +short myip.opendns.com @resolver1.opendns.com`
    [ "$ip" != "" ] && extip=$ip || extip="inactive"

    printf '%11s: %s\n%11s: %s\n' "Local IP" $locip "External IP" $extip
}

alias flush="dscacheutil -flushcache" # Flush DNS cache
alias dns="networksetup -getdnsservers Wi-Fi" # See current nameservers.
alias dnsclear="networksetup -setdnsservers Wi-Fi" # Clears out the custom DNS nameservers.
alias dnslocal="sudo networksetup -setdnsservers Wi-Fi 10.10.10.21"
alias dnsgoogle="sudo networksetup -setdnsservers Wi-Fi 8.8.8.8 8.8.4.4"
alias dnscloud="sudo networksetup -setdnsservers Wi-Fi 1.1.1.1 1.0.0.1 2606:4700:4700::1111 2606:4700:4700::1001"
alias dnsopen="sudo networksetup -setdnsservers Wi-Fi 208.67.222.222 208.67.220.220"
alias dnsunlocator="sudo networksetup -setdnsservers Wi-Fi 185.37.37.37 185.37.39.39"
alias dnsadfree="sudo networksetup -setdnsservers Wi-Fi 192.169.71.180 192.254.74.201 208.110.81.51"
# 178.32.187.10
# 88.150.150.211
# 78.46.231.161

alias dnscloud="sudo networksetup -setdnsservers Wi-Fi 1.1.1.1 1.0.0.1"
alias speedtest='wget -O /dev/null http://speedtest.wdc01.softlayer.com/downloads/test10.zip'
alias vpnfix="sudo ifconfig en0 down && sudo route flush && sudo ifconfig en0 up"

alias gzip="gzip -9n" # set strongest compression level as â€˜defaultâ€™ for gzip
alias ping="ping -c 5" # ping 5 times â€˜by defaultâ€™
alias ql="qlmanage -p 2>/dev/null" # preview a file using QuickLook

# Open Notational Velicity/Simplenote files in Vim
alias notes='cd ~/Dropbox/Notational\ Data;preview'
alias marked='open -a Marked'

# USB hardware
alias usb='system_profiler SPUSBDataType'

# Find Raspberry Pi on network.
alias findpi='arp -na | grep -i b8:27:eb'

# Networking
alias hosts='sudo vim /private/etc/hosts'
alias dnsconf='sudo vim /usr/local/etc/dnsmasq.conf'
alias dnsreload='sudo launchctl unload -w /System/Library/LaunchDaemons/com.apple.mDNSResponder.plist && sudo launchctl load -w /System/Library/LaunchDaemons/com.apple.mDNSResponder.plist'
alias wifi="networksetup -setairportpower en1"

# Find all Raspberry Pi IPs on the network.
alias findpi='arp -na | grep -i b8:27:eb'

# Tmuxinator
alias mux="tmuxinator"

# tm - create new tmux session, or switch to existing one. Works from within tmux too. (@bag-man)
# `tm` will allow you to select your tmux session via fzf.
# `tm irc` will attach to the irc session (if it exists), else it will create it.
function tm() {
  [[ -n "$TMUX" ]] && change="switch-client" || change="attach-session"
  if [ $1 ]; then
    tmux $change -t "$1" 2>/dev/null || (tmux new-session -d -s $1 && tmux $change -t "$1"); return
  fi
  session=$(tmux list-sessions -F "#{session_name}" 2>/dev/null | fzf --exit-0) &&  tmux $change -t "$session" || echo "No sessions found."
}

# fs [FUZZY PATTERN] - Select selected tmux session
#   - Bypass fuzzy finder if there's only one match (--select-1)
#   - Exit if there's no match (--exit-0)
fs() {
  local session
  session=$(tmux list-sessions -F "#{session_name}" | \
    fzf --query="$1" --select-1 --exit-0) &&
  tmux switch-client -t "$session"
}

# fbr - checkout git branch (including remote branches), sorted by most recent commit, limit 30 last branches
fbr() {
  local branches branch
  branches=$(git for-each-ref --count=30 --sort=-committerdate refs/heads/ --format="%(refname:short)") &&
  branch=$(echo "$branches" |
           fzf-tmux -d $(( 2 + $(wc -l <<< "$branches") )) +m) &&
  git checkout $(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")
}

# Vagrant
alias vgs='vagrant global-status'
# alias vgh="vagrant global-status | awk '/virtualbox running/{ print $1 }' | xargs vagrant halt"

# vagrant halt all and vagrant switch
# https://gist.github.com/PGBI/4bdac70e8fcb0d9335db154e9458934f

vagrant() {
  if [[ $@ == "halt all" ]]; then
    command vagrant global-status | grep running | colrm 8 | xargs -L 1 -t vagrant halt
  elif [[ $@ == "switch" ]]; then
    command vagrant global-status | grep running | colrm 8 | xargs -L 1 -t vagrant halt
    command vagrant up
  else
    command vagrant "$@"
  fi
}

# Docker
alias startdocker='open -a Docker'

# Open Jira ticket
jira() {
  open "http://codeandtheory.atlassian.net/browse/$1"
}

# Toggle bluetooth with https://github.com/toy/blueutil installed via blueutil
alias bluetoggle="blueutil --power toggle"

# Automator
alias startcall="automator /Users/kepford/Dropbox/scripts/start_call.workflow  &> /dev/null"
alias stopcall="automator /Users/kepford/Dropbox/scripts/stop_call.workflow  &> /dev/null"

# Edit local aliases
alias eal='vim ~/.alias_local'

# Automatically call nvmuse
# https://github.com/creationix/nvm#deeper-shell-integration
find-up () {
    path=$(pwd)
    while [[ "$path" != "" && ! -e "$path/$1" ]]; do
        path=${path%/*}
    done
    echo "$path"
}

cdnvm(){
    cd "$@";
    nvm_path=$(find-up .nvmrc | tr -d '[:space:]')

    # If there are no .nvmrc file, use the default nvm version
    if [[ ! $nvm_path = *[^[:space:]]* ]]; then

        declare default_version;
        default_version=$(nvm version default);

        # If there is no default version, set it to `node`
        # This will use the latest version on your machine
        if [[ $default_version == "N/A" ]]; then
            nvm alias default node;
            default_version=$(nvm version default);
        fi

        # If the current version is not the default version, set it to use the default version
        if [[ $(nvm current) != "$default_version" ]]; then
            nvm use default;
        fi

        elif [[ -s $nvm_path/.nvmrc && -r $nvm_path/.nvmrc ]]; then
        declare nvm_version
        nvm_version=$(<"$nvm_path"/.nvmrc)

        # Add the `v` suffix if it does not exists in the .nvmrc file
        if [[ $nvm_version != v* ]]; then
            nvm_version="v""$nvm_version"
        fi

        # If it is not already installed, install it
        if [[ $(nvm ls "$nvm_version" | tr -d '[:space:]') == "N/A" ]]; then
            nvm install "$nvm_version";
        fi

        if [[ $(nvm current) != "$nvm_version" ]]; then
            nvm use "$nvm_version";
        fi
    fi
}
alias cd='cdnvm'

# Include local and private aliases.
if [ -f ~/.alias_local ]; then
    source ~/.alias_local
fi
