set rtp+=~/.vim/bundle/vundle/
call vundle#begin()

" let vundle manage vundle
Plugin 'gmarik/vundle'

" list all plugins that you'd like to install here
Plugin 'tpope/vim-repeat' "Required by easyclip
Plugin 'svermeulen/vim-easyclip' "Simplified clipboard functionality for Vim.
Plugin 'rizzatti/dash.vim' "Dash.app support
Plugin 'terryma/vim-multiple-cursors' " True Sublime Text style multiple selections for Vim
Plugin 'kien/ctrlp.vim' " fuzzy find files
Plugin 'scrooloose/nerdtree' " file drawer, open with :NERDTreeToggle
Plugin 'benmills/vimux'
Plugin 'tpope/vim-fugitive' " the ultimate git helper
Plugin 'airblade/vim-gitgutter' " shows a git diff in the gutter
Plugin 'tpope/vim-commentary' " comment/uncomment lines with gcc or gc in visual mode
Plugin 'tomtom/tcomment_vim' "provides easy to use, file-type sensible comments for Vim
Plugin 'pbrisbin/vim-mkdir' "Automatically create any non-existent directories before writing the buffer
Plugin 'ervandew/supertab' "use <Tab> for all your insert completion needs (:help ins-completion).
Plugin 'scrooloose/syntastic' "syntax checking plugin for Vim.
Plugin 'christoomey/vim-tmux-navigator' "https://robots.thoughtbot.com/seamlessly-navigate-vim-and-tmux-splits
Plugin 'tpope/vim-surround' " surround text with things
Plugin 'bling/vim-airline'
Plugin 'edkolev/tmuxline.vim' " Tmuxline
Plugin 'evidens/vim-twig'
Plugin 'elzr/vim-json' " JSON code highlighting.
Plugin 'MarcWeber/vim-addon-mw-utils' " Required by vim-snipmate
Plugin 'tomtom/tlib_vim' " Required by vim-snipmate
Plugin 'garbas/vim-snipmate'
Plugin 'shawncplus/phpcomplete.vim'
Plugin 'davidoc/taskpaper.vim'
Plugin 'szw/vim-g' "Google from vim by selecting a word

" Markdown
Plugin 'godlygeek/tabular'
Plugin 'tpope/vim-markdown'
Plugin 'reedes/vim-pencil'
Plugin 'itspriddle/vim-marked'

" Bundles
Bundle 'git://drupalcode.org/project/vimrc.git', {'rtp': 'bundle/vim-plugin-for-drupal/'}
Bundle 'joonty/vdebug.git'

call vundle#end()
filetype plugin indent on

" Disable arrow keys.
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

" Set leader to space bar
let mapleader = "\<Space>"

" Shortcut to rapidly toggle `set list`
nmap <leader>l :set list!<CR>

" Use the same symbols as TextMate for tabstops and EOLs
set listchars=tab:▸\ ,eol:¬

set nocompatible                  " Must come first because it changes other options.

syntax enable                     " Turn on syntax highlighting.
filetype plugin indent on         " Turn on file type detection.

"runtime macros/matchit.vim        " Load the matchit plugin.

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" Vdebug settings.
let g:vdebug_options = {}
let g:vdebug_options['port'] = 9001

" Need to set as empty for this to work with Vagrant boxes.
let g:vdebug_options['server'] = ""

" Toggle synctastic
:command Sd SyntasticToggleMode

set guifont=Monaco

" Syntastic Drupal coding standards
let g:syntastic_php_phpcs_args="--standard=Drupal --extensions=php,module,inc,install,test,profile,theme"

set showcmd                       " Display incomplete commands.
set showmode                      " Display the mode you're in.

set backspace=indent,eol,start    " Intuitive backspacing.

set hidden                        " Handle multiple buffers better.

set wildmenu                      " Enhanced command line completion.
set wildmode=list:longest         " Complete files like a shell.

set ignorecase                    " Case-insensitive searching.
set smartcase                     " But case-sensitive if expression contains a capital letter.

set number                        " Show line numbers.
"set ruler                         " Show cursor position.

" Check spelling in Git
autocmd FileType gitcommit setlocal spell

" TMUX
if exists('$TMUX')
  set term=screen-256color
endif

if exists('$ITERM_PROFILE')
  if exists('$TMUX')
    let &t_SI = "\<Esc>[3 q"
    let &t_EI = "\<Esc>[0 q"
  else
    let &t_SI = "\<Esc>]50;CursorShape=1\x7"
    let &t_EI = "\<Esc>]50;CursorShape=0\x7"
  endif
end

" for tmux to automatically set paste and nopaste mode at the time pasting (as
" happens in VIM UI)

function! WrapForTmux(s)
  if !exists('$TMUX')
    return a:s
  endif

  let tmux_start = "\<Esc>Ptmux;"
  let tmux_end = "\<Esc>\\"

  return tmux_start . substitute(a:s, "\<Esc>", "\<Esc>\<Esc>", 'g') . tmux_end
endfunction

let &t_SI .= WrapForTmux("\<Esc>[?2004h")
let &t_EI .= WrapForTmux("\<Esc>[?2004l")

function! XTermPasteBegin()
  set pastetoggle=<Esc>[201~
  set paste
  return ""
endfunction

inoremap <special> <expr> <Esc>[200~ XTermPasteBegin()

" Set cursorline colors
highlight CursorLine ctermbg=235

" Set color of number column on cursorline
highlight CursorLineNR ctermbg=235 ctermfg=white

highlight LineNr term=bold cterm=NONE ctermfg=DarkGrey ctermbg=NONE gui=NONE guifg=DarkGrey guibg=NONE

" Turn off autohide of quotes in json-vim.
let g:vim_json_syntax_conceal = 0

" Better Undo History  http://shelldevel.net/post/112278835197/better-undo-history-in-vim
set undofile

set undodir=~/.vim/history

set undolevels=1000

set undoreload=10000

set incsearch                     " Highlight matches as you type.
set hlsearch                      " Highlight matches.

set wrap                          " Turn on line wrapping.
set scrolloff=3                   " Show 3 lines of context around the cursor.

set title                         " Set the terminal's title

set visualbell                    " No beeping.

" No .swp files.
set noswapfile

set nobackup                      " Don't make a backup before overwriting a file.
set nowritebackup                 " And again.
set directory=$HOME/.vim/tmp//,.  " Keep swap files in one location

" UNCOMMENT TO USE
set tabstop=2                    " Global tab width.
set shiftwidth=2                 " And again, related.
set expandtab                    " Use spaces instead of tabs

set laststatus=2                  " Show the status line all the time
" Useful status information at bottom of screen
set statusline=[%n]\ %<%.99f\ %h%w%m%r%y\ %{exists('*CapsLockStatusline')?CapsLockStatusline():''}%=%-16(\ %l,%c-%v\ %)%P

"Markdown specific stuff.
let g:marked_app = "Marked 2"
autocmd BufNewFile,BufReadPost *.md set filetype=markdown
autocmd Filetype markdown call SetMarkdownOptions()
function! SetMarkdownOptions()
  set showmode
  " Enable spellcheck.
  set spell spelllang=en_us
  " Wrap text (without linebreak charecters)
  " I don't want to highlight the current line.
  highlight CursorLine ctermbg=NONE
  " Lastly, invoke Goyo plugin.
endfunction

" Vim-pencil stuff.
augroup pencil
  autocmd!
  autocmd FileType markdown,mkd,md call pencil#init()
  autocmd FileType text         call pencil#init()
augroup ENDighlight ExtraWhitespace ctermbg=red guibg=red

"folding settings
set foldmethod=indent            "fold based on indent
set foldnestmax=10               "deepest fold is 10 levels
set nofoldenable                 "dont fold by default
set foldlevel=1                  "this is just what i use

" Tab mappings.
map <leader>tt :tabnew<cr>
map <leader>te :tabedit
map <leader>tc :tabclose<cr>
map <leader>to :tabonly<cr>
map <leader>tn :tabnext<cr>
map <leader>tp :tabprevious<cr>
map <leader>tf :tabfirst<cr>
map <leader>tl :tablast<cr>
map <leader>tm :tabmove

" Open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright

" Resize splits with mouse.
set ttymouse=xterm2

" Map ctrl+d to toggle NERDTree
map <C-d> :NERDTreeToggle<cr>

" Remap ctrl-p to ctrl-o
let g:ctrlp_map = '<c-o>'

" Remap CtrlP to leader o
nnoremap <Leader>o :CtrlP<CR>

" Remap CtrlPBuffer to leader b
nnoremap <Leader>b :CtrlPBuffer<CR>

" Save files faster
nnoremap <Leader>w :w<CR>

" Set NerdTree Window size
let NERDTreeWinSize = 40

"https://github.com/scrooloose/nerdtree/issues/162#issuecomment-107643011
nmap <silent> <Leader>t :call g:WorkaroundNERDTreeToggle()<CR>

function! g:WorkaroundNERDTreeToggle()
  try | NERDTreeToggle | catch | silent! NERDTree | endtry
endfunction

" T-Comment mapping
map <leader>c <c-_><c-_>

" Auto remove line end whitespace
autocmd BufWritePre * :%s/\s\+$//e

set autoindent
set smartindent
set clipboard=unnamed
:set mouse=a
if has("autocmd")
  " Drupal *.module and *.install files.
  augroup module
    autocmd BufRead,BufNewFile *.module set filetype=php
    autocmd BufRead,BufNewFile *.install set filetype=php
    autocmd BufRead,BufNewFile *.test set filetype=php
    autocmd BufRead,BufNewFile *.inc set filetype=php
    autocmd BufRead,BufNewFile *.profile set filetype=php
    autocmd BufRead,BufNewFile *.view set filetype=php
  augroup END

  " Omnicompletion with PHPcomplete
  autocmd FileType php set omnifunc=phpcomplete#CompletePHP
endif
syntax enable

" Increase speed of ctrlp by excluding files.
" https://medium.com/a-tiny-piece-of-vim/making-ctrlp-vim-load-100x-faster-7a722fae7df6
let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']

" Automatically reload vimrc when it's saved.
augroup VimrcSo
  au!
  autocmd BufWritePost $MYVIMRC so $MYVIMRC
augroup END

" Include local vim settings.
let $LOCALFILE=expand('~/.vimrc-private')
if filereadable($LOCALFILE)
    source $LOCALFILE
endif
