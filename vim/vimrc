filetype plugin indent on

" Include Plugins.
if filereadable(expand("~/.vim/plugins.vim"))
  source ~/.vim/plugins.vim
endif

"""""""""""""""""""""""""""""""""""""""
" Remapping
"""""""""""""""""""""""""""""""""""""""

" Disable arrow keys.
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

" Zoom current split.
noremap Zz <c-w>_ \| <c-w>\|
noremap Zo <c-w>=

" change vertical to horizontal with -
noremap <c-w>-  <c-w>t<c-w>K

" change horizontal to vertical with |
noremap <c-w>\|  <c-w>t<c-w>H

" Add line without entering insert mode.
nmap <S-Enter> O<Esc>
nmap <CR> o<Esc>

" Set leader to space bar
let mapleader = "\<Space>"

" Close other buffers, focus on one.
nnoremap <Leader>f :only<CR>

" Map gm due to https://github.com/svermeulen/vim-easyclip use of m for
" cut/paste.
nnoremap gm m

" Search the git repository for filename with.
nnoremap <leader>g :GFiles<CR>

" Open files with leader o
nnoremap <Leader>o :Files<CR>

" <Leader>p -- Show the path of the current file (mnemonic: path; useful when
" you have a lot of splits and the status line gets truncated).
nnoremap <Leader>p :echo expand('%')<CR>

" Copy current buffer file name and full path to system clipboard.
nnoremap <Leader>pp :let @+ = expand("%:p")<CR>

" <Leader>n -- Show the name of the current file (mnemonic: name; useful when
" you have a lot of splits and the status line gets truncated).
nnoremap <Leader>n :echo expand('%:t')<CR>

" Copy current buffer file name relative path to system clipboard.
nnoremap <Leader>nn :let @+ = './' . expand("%:t")<CR>

" Remap Buffer to leader b
nnoremap <Leader>b :Buffers<CR>

" Remap Tag to .
nnoremap <leader>. :Tags<cr>

" Save files faster
nnoremap <Leader>w :w<CR>

" Allow saving of files as sudo when I forgot to start vim using sudo.
cmap w!! w !sudo tee > /dev/null %

nnoremap <Leader>q :quit<CR>

nnoremap <Leader>x :xit<CR>

" Comment mapping
nmap cm  <Plug>Commentary

" Yank the current popup text to register with PopYank plugin.
nmap <leader>y <Plug>(PopYank)

" Edit vimrc and load vimrc bindings
nnoremap <leader>ev :vsp $MYVIMRC<CR>
nnoremap <leader>sv :source $MYVIMRC<CR>

" open ag.vim
nnoremap <leader>a :Ag

" Open URL under cursor for MacOS.
function! OpenURLUnderCursor()
  let s:uri = expand('<cWORD>')
  let s:uri = substitute(s:uri, '?', '\\?', '')
  let s:uri = shellescape(s:uri, 1)
  if s:uri != ''
if system('uname -s') == "Darwin\n"
    silent exec "!open '".s:uri."'"
else
    silent exec "!firefox '".s:uri."'"
endif
    :redraw!
  endif
endfunction
nnoremap gx :call OpenURLUnderCursor()<CR>

"""""""""""""""""""""""""""""""""""""""
" General settings
"""""""""""""""""""""""""""""""""""""""

set nocompatible                      " Must come first because it changes other options.
syntax enable                         " Turn on syntax highlighting.
filetype plugin indent on             " Turn on file type detection.
set showmode                          " Display the mode you're in.
set backspace=indent,eol,start        " Intuitive backspacing.
set ruler                             " Show cursor position.

if has('persistent_undo')
  if exists('$SUDO_USER')
    set noundofile                    " don't create root-owned files
  else
    set undodir=~/local/.vim/tmp/undo " Keep undo files out of the way.
    set undodir+=~/.vim/tmp/undo
    set undodir+=.
    set undofile                      " actually use undo files
    set undolevels=1000
    set undoreload=10000
  endif
endif

if has('viminfo')
  if exists('$SUDO_USER')
    set viminfo=                      " Don't create root-owned files.
  else
    if isdirectory('~/local/.vim/tmp')
      set viminfo+=n~/local/.vim/tmp/viminfo
    else
      set viminfo+=n~/.vim/tmp/viminfo " Override ~/.viminfo default.
    endif

    if !empty(glob('~/.vim/tmp/viminfo'))
      if !filereadable(expand('~/.vim/tmp/viminfo'))
        echoerr 'warning: ~/.vim/tmp/viminfo exists but is not readable'
      endif
    endif
  endif
endif

if has('mksession')
  if isdirectory('~/local/.vim/tmp')
    set viewdir=~/local/.vim/tmp/view
  else
    set viewdir=~/.vim/tmp/view       " Override ~/.vim/view default.
  endif
  set viewoptions=cursor,folds        " Save/restore just these (with `:{mk,load}view`).
endif

if has('virtualedit')
  set virtualedit=block               " Allow cursor to move where there is no text in visual block mode
endif

if has('wildmenu')
  set wildmenu                        " Show options as list when switching buffers etc
endif

set wildmode=longest:full,full        " Shell-like autocomplete to unambiguous portion
set incsearch                         " Highlight matches as you type.
set hlsearch                          " Highlight matches.
set ignorecase                        " Case-insensitive searching.
set smartcase                         " But case-sensitive if expression contains a capital letter.
set wrap                              " Turn on line wrapping.
set title                             " Set the terminal's title
set noswapfile                        " Don't create swap files.
set nrformats+=alpha
set nrformats-=octal

if exists('$SUDO_USER')
  set nobackup                        " Don't create root-owned files.
  set nowritebackup                   " Don't create root-owned files.
else
  set backupdir=$HOME/local/.vim/tmp/backup
  set backupdir+=$HOME/.vim/tmp/backup    " Keep backup files out of the way.
  set backupdir+=.
endif

if exists('&belloff')
  set belloff=all                     " Never ring the bell for any reason.
endif

set visualbell                        " No beeping.

if has('linebreak')
  set breakindent                     " Indent wrapped lines to match start.
  if exists('&breakindentopt')
    set breakindentopt=shift:2        " Emphasize broken lines by indenting them.
  endif
endif

set expandtab                         " Use spaces instead of tabs
set laststatus=2                      " Show the status line all the time
set lazyredraw                        " Don't bother updating screen during macro playback
set listchars=nbsp:⦸                  " CIRCLED REVERSE SOLIDUS (U+29B8, UTF-8: E2 A6 B8)
set listchars=tab:▸\ ,eol:¬           " Use the same symbols as TextMate for tab stops and EOLs.
                                      " + BOX DRAWINGS HEAVY TRIPLE DASH HORIZONTAL (U+2505, UTF-8: E2 94 85)
set listchars+=extends:»              " RIGHT-POINTING DOUBLE ANGLE QUOTATION MARK (U+00BB, UTF-8: C2 BB)
set listchars+=precedes:«             " LEFT-POINTING DOUBLE ANGLE QUOTATION MARK (U+00AB, UTF-8: C2 AB)
set listchars+=trail:•                " BULLET (U+2022, UTF-8: E2 80 A2)
set nojoinspaces                      " Don't autoinsert two spaces after '.', '?', '!' for join command.
set number                            " Show line numbers in gutter.

if exists('+relativenumber')
  set relativenumber             " Show relative numbers in gutter.
endif

set scrolloff=3                  " Show 3 lines of context around the cursor.
set shiftround                   " Always indent by multiple of shiftwidth.
set shiftwidth=2                 " Spaces per tab (when shifting)

if has('linebreak')
  let &showbreak='⤷ '            " ARROW POINTING DOWNWARDS THEN CURVING RIGHTWARDS (U+2937, UTF-8: E2 A4 B7)
endif

if has('showcmd')
  set showcmd                    " Display incomplete commands. " extra info at end of command line.
endif

set sidescrolloff=3              " Same as scolloff, but for columns.
set smarttab                     " <tab>/<BS> indent/dedent in leading whitespace

if v:progname !=# 'vi'
  set softtabstop=-1                  " Use 'shiftwidth' for tab/bs at end of line.
endif

" Useful status information at bottom of screen
set statusline=[%n]\ %<%.99f\ %h%w%m%r%y\ %{exists('*CapsLockStatusline')?CapsLockStatusline():''}%=%-16(\ %l,%c-%v\ %)%P

if has('syntax')
  set spellcapcheck=             " Don't check for capital letters at start of sentence.
endif

set switchbuf=usetab             " Try to reuse windows/tabs when switching buffers.
set tabstop=2                    " Global tab width.

" Auto remove line end whitespace
autocmd BufWritePre * :%s/\s\+$//e

set autoindent
set smartindent

if system('uname -s') == "Darwin\n"
  "MacOS
  set clipboard=unnamed
else
  "Linux
  set clipboard=unnamedplus
endif

set complete+=kspell
set statusline=[%n]\ %<%.99f\ %h%w%m%r%y\

" Enable text selection with the mouse in all modes.
:set mouse=a

"""""""""""""""""""""""""""""""""""""""
" Netrw
"""""""""""""""""""""""""""""""""""""""
" Map :E to :Explore: http://stackoverflow.com/questions/14367440/map-e-to-explore-in-command-mode
command! -nargs=* -bar -bang -count=0 -complete=dir E Explore <args>

let g:netrw_liststyle=3     " tree view
let g:netrw_list_hide=netrw_gitignore#Hide()
let g:netrw_list_hide = '\(^\|\s\s\)\zs\.\S\+'
" let g:netrw_browse_split=4 " Open file in previous buffer

" Allow netrw to remove non-empty local directories
let g:netrw_localrmdir='rm -rf'

" Resolve hidden buffers preventing quiting of Vim.
autocmd FileType netrw setl bufhidden=delete

" map leader+d to toggle Netrw
nnoremap <leader>d :Lexplore<cr>
let g:netrw_winsize=20

" Titlecase plugin
let g:titlecase_map_keys = 0
nmap <leader>gt <Plug>Titlecase
vmap <leader>gt <Plug>Titlecase
nmap <leader>gT <Plug>TitlecaseLine

"""""""""""""""""""""""""""""""""""""""
" ALE
"""""""""""""""""""""""""""""""""""""""
let g:ale_php_phpcs_standard="Drupal"
let g:ale_php_phpcs_executable='~/.composer/vendor/bin/phpcs'
let g:ale_php_php_cs_fixer_executable = '~/.composer/vendor/bin/phpcbf'
" let g:ale_html_tidy_executable = '/usr/bin/tidy'
let g:ale_linters = {
\   'php': ['php', 'phpcs'],
\   'javascript': ['eslint'],
\   'javascript.jsx': ['eslint'],
\   'scss': ['sasslint'],
\   'typescript': ['eslint'],
\   'markdown': ['proselint'],
\}

let g:ale_fixers = {
\   'css': ['prettier'],
\   'javascript': ['prettier', 'eslint'],
\   'typescript': ['prettier', 'tslint'],
\   'typescriptreact': ['prettier', 'tslint'],
\   'php': ['php_cs_fixer'],
\   'scss': ['prettier'],
\   'html': ['tidy', 'prettier'],
\}

" let g:ale_linter_aliases = {'jsx': 'css'}

let g:airline#extensions#ale#enabled = 1 " Set this. Airline will handle the rest.
let g:ale_sign_error = '●' " Less aggressive than the default '>>'
let g:ale_sign_warning = '.'
let g:ale_lint_on_enter = 0 " Less distracting when opening a new file

let g:ale_javascript_prettier_use_local_config = 1

" Running Prettier manually.
nnoremap gp :silent %!prettier --stdin --trailing-comma all --single-quote<CR>

""""""""""""""""""""""""""""""""""""""""
" Easyclip
""""""""""""""""""""""""""""""""""""""""
" Remap the cut command from m to x since m is important for marks.
let g:EasyClipUseCutDefaults = 0

nmap x <Plug>MoveMotionPlug
xmap x <Plug>MoveMotionXPlug
nmap xx <Plug>MoveMotionLinePlug

""""""""""""""""""""""""""""""""""""""""
" Snipmate
""""""""""""""""""""""""""""""""""""""""
"to prevent clash with tab completion, change snippet trigger
" imap <C-J> <esc>a<Plug>snipMateNextOrTrigger
" smap <C-J> <Plug>snipMateNextOrTrigger

""""""""""""""""""""""""""""""""""""""""
" Utilisnips
""""""""""""""""""""""""""""""""""""""""
" Trigger configuration. You need to change this to something other than <tab> if you use one of the following:
" - https://github.com/Valloric/YouCompleteMe
" - https://github.com/nvim-lua/completion-nvim
let g:UltiSnipsExpandTrigger="<c-J>"
let g:UltiSnipsJumpForwardTrigger="<c-n>"
let g:UltiSnipsJumpBackwardTrigger="<c-b>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"

" Load snippets in fzf
nnoremap <Leader>u :Snippets<CR>

""""""""""""""""""""""""""""""""""""""""
" Vimux
""""""""""""""""""""""""""""""""""""""""
" Prompt for a Vimux command to run
map <Leader>vp :VimuxPromptCommand<CR>

" Run last command executed by VimuxRunCommand
map <Leader>vl :VimuxRunLastCommand<CR>

" Inspect runner pane
map <Leader>vi :VimuxInspectRunner<CR>

" Zoom the tmux runner pane
map <Leader>vz :VimuxZoomRunner<CR>

" Vdebug
""""""""""""""""""""""""""""""""""""""""

" Keymap for Vdebug
" let g:vdebug_keymap = {
" \    "run" : "<Leader>/",
" \    "run_to_cursor" : "<Down>",
" \    "step_over" : "<Up>",
" \    "step_into" : "<Left>",
" \    "step_out" : "<Right>",
" \    "close" : "q",
" \    "detach" : "<F7>",
" \    "set_breakpoint" : "<Leader>s",
" \    "eval_visual" : "<Leader>e",
" \    "eval_under_cursor" : "<Leader>c"
" \}

" Vdebug settings.
let g:vdebug_options = {}
let g:vdebug_options['break_on_open'] = 1
let g:vdebug_options['max_children'] = 128
let g:vdebug_options['watch_window_style'] = 'compact'
let g:vdebug_options['ide_key'] = 'PHPSTORM'

" Need to set as empty for this to work with Vagrant boxes.
let g:vdebug_options['server'] = ""

"""""""""""""""""""""""""""""""""""""""
" airline
"""""""""""""""""""""""""""""""""""""""

" Powerline Escape Fix: http://usevim.com/2013/07/24/powerline-escape-fix
if ! has('gui_running')
  set ttimeoutlen=10
  augroup FastEscape
    autocmd!
    au InsertEnter * set timeoutlen=0
    au InsertLeave * set timeoutlen=1000
  augroup END
endif

" need it for airline symbols
set encoding=utf-8

" airline settings
let g:airline#extensions#syntastic#enabled=1
let g:airline_powerline_fonts=1

if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif

" unicode symbols
let g:airline_left_sep = '»'
let g:airline_left_sep = '▶'
let g:airline_right_sep = '«'
let g:airline_right_sep = '◀'
let g:airline_symbols.linenr = '␊'
let g:airline_symbols.linenr = '␤'
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.branch = ''
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.paste = 'þ'
let g:airline_symbols.paste = '∥'
let g:airline_symbols.whitespace = 'ξ'

"""""""""""""""""""""""""""""""""""""""
" git
"""""""""""""""""""""""""""""""""""""""

" check spelling in git
autocmd FileType gitcommit setlocal spell
autocmd FileType gitcommit set textwidth=72

" Used by CursorHold autocommand and specifically for gitgutter.
set updatetime=1000

"""""""""""""""""""""""""""""""""""""""
" Tmux
"""""""""""""""""""""""""""""""""""""""

" zoom a vim pane, <C-w>= to re-balance
nnoremap <leader>- :wincmd _<cr>:wincmd \|<cr>
nnoremap <leader>= :wincmd =<cr>

if exists('$tmux')
  set term=screen-256color
endif

" Change Cursor shape by mode for tmux.
if exists('$TMUX')
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

" For tmux to automatically set paste and nopaste mode at the time pasting (as
" happens in VIM UI)
function! WrapForTmux(s)
  if !exists('$TMUX')
    return a:s
  endif

  let tmux_start = "\<Esc>Ptmux;"
  let tmux_end = "\<Esc>\\"

  return tmux_start . substitute(a:s, "\<Esc>", "\<Esc>\<Esc>", 'g') . tmux_end
endfunction

let &t_SI .= WrapForTmux("\<Esc>[?2004h")
let &t_EI .= WrapForTmux("\<Esc>[?2004l")

function! XTermPasteBegin()
  set pastetoggle=<Esc>[201~
  set paste
  return ""
endfunction

inoremap <special> <expr> <Esc>[200~ XTermPasteBegin()
" End fix for Tmux paste.

""""""""""""""""""""""""""""""""""""""
" Colors
""""""""""""""""""""""""""""""""""""""

" Show syntax highlighting groups for word under cursor
nmap <C-S-P> :call <SID>SynStack()<CR>
function! <SID>SynStack()
  if !exists("*synstack")
    return
  endif
  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc

map <Leader>c :call SyntaxAttr#SyntaxAttr()<CR>

" Set Vim-specific sequences for RGB colors
if exists('$TMUX')
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
endif

if has('termguicolors')
  set termguicolors                   " use guifg/guibg instead of ctermfg/ctermbg in terminal
endif

syntax enable
set background=dark
colorscheme dracula
let g:airline_theme='dracula'

" Show syntax highlighting groups for word under cursor
nmap <C-S-P> :call <SID>SynStack()<CR>
function! <SID>SynStack()
  if !exists("*synstack")
    return
  endif
  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc

"""""""""""""""""""""""""""""""""""""""
" Line coloring
"""""""""""""""""""""""""""""""""""""""

set cursorline " Highlight current line.
highlight Comment cterm=italic gui=italic
set textwidth=80                      " Set width to 80 characters as this is a good default and is also the Drupal coding standard.

" Mark trailing white space.
match ErrorMsg '\%>120v.\+'
match ErrorMsg '\s\+$'

" if exists('+colorcolumn')
"   " Highlight up to 255 columns (this is the current Vim max) beyond 'textwidth'
"   let &l:colorcolumn='+' . join(range(0, 255), ',+')
" endif

"""""""""""""""""""""""""""""""""""""""
" Misc
"""""""""""""""""""""""""""""""""""""""

" turn off autohide of quotes in json-vim.
let g:vim_json_syntax_conceal = 0

" Custom wrap command.
command! -nargs=* Wrap set wrap linebreak nolist

"""""""""""""""""""""""""""""""""""""""
" Markdown
"""""""""""""""""""""""""""""""""""""""
au FileType Markdown set textwidth=0                  " Don't set text width in markdown files.
let g:table_mode_corner=" "

if system('uname -s') == "Darwin\n"
  let g:marked_app = "marked 2"
endif
autocmd bufnewfile,bufreadpost *.md set filetype=markdown
autocmd filetype markdown call Setmarkdownoptions()
function! Setmarkdownoptions()
  set showmode
  " enable spellcheck.
  set spell spelllang=en_us
  " wrap text (without linebreak charecters)
  " i don't want to highlight the current line.
  highlight cursorline ctermbg=none
endfunction
let g:vim_markdown_new_list_item_indent = 2
let g:markdown_fenced_languages = ['php', 'css', 'sass', 'javascript', 'js=javascript', 'json=javascript', 'bash=sh', 'html']
let g:markdown_fold_style = 'nested'

" Add custom surround for markdown bold and emphasis
autocmd FileType markdown let b:surround_{char2nr('e')} = "*\r*"
autocmd FileType markdown let b:surround_{char2nr('b')} = "**\r**"

function! s:goyo_enter()
  if executable('tmux') && strlen($TMUX)
    silent !tmux set status off
    silent !tmux list-panes -F '\#F' | grep -q Z || tmux resize-pane -Z
  endif
  set noshowmode
  set noshowcmd
  set scrolloff=999
  Limelight
  Pencil
endfunction

function! s:goyo_leave()
  if executable('tmux') && strlen($TMUX)
    silent !tmux set status on
    silent !tmux list-panes -F '\#F' | grep -q Z && tmux resize-pane -Z
  endif
  set showmode
  set showcmd
  set scrolloff=5
  Limelight!
  PencilOff
endfunction

autocmd! User GoyoEnter nested call <SID>goyo_enter()
autocmd! User GoyoLeave nested call <SID>goyo_leave()

"""""""""""""""""""""""""""""""""""""""
" Folding settings
"""""""""""""""""""""""""""""""""""""""
if has('folding')
  if has('windows')
    set fillchars=vert:┃              " BOX DRAWINGS HEAVY VERTICAL (U+2503, UTF-8: E2 94 83)
  endif
  set foldmethod=indent            " Fold based on indent.
  set foldnestmax=6                " Deepest fold is 10 levels.
  set nofoldenable                 " Dont fold by default.
  set foldlevel=1                  " This is just what i use.
endif

if v:version > 703 || v:version == 703 && has('patch541')
  set formatoptions+=j                " Remove comment leader when joining comment lines.
endif

set formatoptions+=n              " Smart auto-indenting inside numbered list.
set hidden                        " Allows you to hide buffers with unsaved changes without being prompted.

" set highlight+=@:ColorColumn          " ~/@ at end of window, 'showbreak'
" set highlight+=N:DiffText             " Make current line number stand out a little
" set highlight+=c:LineNr               " Blend vertical separators with line numbers

if has('linebreak')
  set linebreak                       " Wrap long lines at characters in 'breakat'.
endif

""""""""""""""""""""""""""""""""""""""
" Tab mappings
""""""""""""""""""""""""""""""""""""""

map <leader>tt :tabnew<cr>
map <leader>te :tabedit
map <leader>tc :tabclose<cr>
map <leader>to :tabonly<cr>
map <leader>tn :tabnext<cr>
map <leader>tp :tabprevious<cr>
map <leader>tf :tabfirst<cr>
map <leader>tl :tablast<cr>
map <leader>tm :tabmove

"""""""""""""""""""""""""""""""""""""
" Splits
"""""""""""""""""""""""""""""""""""""

" Open new split panes to right and bottom, which feels more natural.
if has('windows')
  set splitbelow
endif

if has('vertsplit')
  set splitright
endif

" resize splits with mouse.
" set ttymouse=xterm2

"""""""""""""""""""""""""""""""""""""
" Make arrowkey resize viewports
" To resize the split by 1 use Left,Right,Up,Down
" To resize by 50% of the split use <C-w>Left,Right,Up,Down
"""""""""""""""""""""""""""""""""""""

nnoremap <Left> :vertical resize +1<CR>
nnoremap <Right> :vertical resize -1<CR>
nnoremap <Up> :resize +1<CR>
nnoremap <Down> :resize -1<CR>
nnoremap <C-w><Right> :exe "vertical resize +" . (winwidth(0) * 1/2)<CR>
nnoremap <C-w><Left> :exe "vertical resize -" . (winwidth(0) * 1/2)<CR>
nnoremap <C-w><Up> :exe "resize +" . (winheight(0) * 1/2)<CR>
nnoremap <C-w><Down> :exe "resize -" . (winheight(0) * 1/2)<CR>

"""""""""""""""""""""""""""""""""""""""
" Javascript
"""""""""""""""""""""""""""""""""""""""
" Enables syntax highlighting for JSDocs.
let g:javascript_plugin_jsdoc = 1
let g:jsx_ext_required = 0 " Allow JSX in normal JS files

" Omni completion for Javascript.
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS

"""""""""""""""""""""""""""""""""""""""
" PHP
"""""""""""""""""""""""""""""""""""""""
let g:ycm_semantic_triggers = {}
let g:ycm_semantic_triggers.php =
      \ ['->', '::', '(', 'use ', 'namespace ', '\']

function! IPhpInsertUse()
    call PhpInsertUse()
    call feedkeys('a',  'n')
endfunction
autocmd FileType php inoremap <Leader>cu <Esc>:call IPhpInsertUse()<CR>
autocmd FileType php noremap <Leader>cu :call PhpInsertUse()<CR>

" Adds custom PHP tag surround with `-` in PHP files.
autocmd FileType php let b:surround_45 = "<?php \r ?>"

"""""""""""""""""""""""""""""""""""""""
" Drupal
"""""""""""""""""""""""""""""""""""""""

if has("autocmd")
  " Drupal *.module and *.install files.
  augroup module
    autocmd BufRead,BufNewFile *.module set filetype=php
    autocmd BufRead,BufNewFile *.install set filetype=php
    autocmd BufRead,BufNewFile *.test set filetype=php
    autocmd BufRead,BufNewFile *.inc set filetype=php
    autocmd BufRead,BufNewFile *.profile set filetype=php
    autocmd BufRead,BufNewFile *.view set filetype=php
  augroup END

  " Omnicompletion with PHPcomplete
  autocmd FileType php set omnifunc=phpcomplete#CompletePHP
endif

"""""""""""""""""""""""""""""""""""""""
" Auto save
"""""""""""""""""""""""""""""""""""""""

let g:auto_save = 0
" Only enabled for markdown files.
augroup ft_markdown
  au!
  au FileType markdown let b:auto_save = 1
augroup END

""""""""""""""""""""""""""""""""""""""""
" Auto load files
""""""""""""""""""""""""""""""""""""""""
set autoread
au CursorHold * checktime

"""""""""""""""""""""""""""""""""""""""
" Gist settings
"""""""""""""""""""""""""""""""""""""""

" Detect filetype from the filename.
let g:gist_detect_filetype = 1

" Open browser after the post.
let g:gist_open_browser_after_post = 1

"""""""""""""""""""""""""""""""""""""""
" Vimrc settings
"""""""""""""""""""""""""""""""""""""""

" Automatically reload vimrc when it's saved.
augroup myvimrc
    au!
    au BufWritePost .vimrc,_vimrc,vimrc,.gvimrc,_gvimrc,gvimrc so $MYVIMRC | if has('gui_running') | so $MYGVIMRC | endif
augroup END

" Include local vim settings.
let $LOCALFILE=expand('~/.vimrc-private')
if filereadable($LOCALFILE)
    source $LOCALFILE
endif

if filereadable(expand("~/.vim/functions.vim"))
  source ~/.vim/functions.vim
endif

" Include abbreviations
if filereadable(expand("~/.vim/abbreviations.vim"))
  source ~/.vim/abbreviations.vim
endif

" Use fzf in Vim!
set rtp+=/usr/local/opt/fzf

" Look for project specific .vimrc.
set exrc
set secure
