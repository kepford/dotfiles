set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" let vundle manage vundle
Plugin 'gmarik/vundle'

" Easyclip
Plugin 'tpope/vim-repeat' "Required by easyclip
Plugin 'svermeulen/vim-easyclip' "Simplified clipboard functionality for Vim.

" Search
Plugin 'rking/ag.vim' " a front for ag, A.K.A. the_silver_searcher

" File management
Plugin 'ctrlpvim/ctrlp.vim' " fuzzy find files
Plugin 'tpope/vim-vinegar' " Combine with netrw to create a delicious salad dressing.
Plugin 'pbrisbin/vim-mkdir' "Automatically create any non-existent directories before writing the buffer

" Git
Plugin 'tpope/vim-fugitive' " the ultimate git helper
Plugin 'airblade/vim-gitgutter' " shows a git diff in the gutter
Plugin 'christoomey/vim-conflicted' "Easy git merge conflict resolution in Vim

" Code management
Plugin 'tpope/vim-commentary' " comment/uncomment lines with gcc or gc in visual mode
Plugin 'ervandew/supertab' "use <Tab> for all your insert completion needs (:help ins-completion).
Plugin 'scrooloose/syntastic' "syntax checking plugin for Vim.
Plugin 'majutsushi/tagbar'
Plugin 'xolox/vim-misc' "Required by easytags.
Plugin 'xolox/vim-easytags' "Automated tag file generation and syntax highlighting of tags
Plugin 'AndrewRadev/splitjoin.vim' "Transition between multiline and single-line code.

" Tmux
Plugin 'christoomey/vim-tmux-navigator' "https://robots.thoughtbot.com/seamlessly-navigate-vim-and-tmux-splits

" Airline
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'

" Syntax highlighting.
Plugin 'lumiliet/vim-twig' " Twig syntax hightlighting.
Plugin 'elzr/vim-json' " JSON code highlighting.

" Snipmate
Plugin 'MarcWeber/vim-addon-mw-utils' " Required by vim-snipmate
Plugin 'tomtom/tlib_vim' " Required by vim-snipmate
Plugin 'garbas/vim-snipmate'
Plugin 'honza/vim-snippets' " Snippets for snipmate

" Misc
Plugin 'tpope/vim-unimpaired'
Plugin 'tpope/vim-surround' " surround text with things
Plugin 'tpope/vim-dispatch' " Run commands in the background.
Plugin 'tpope/vim-speeddating' " use CTRL-A/CTRL-X to increment dates, times, and more.
Plugin 'tpope/vim-rsi' " Readline style insertion.
Plugin 'benmills/vimux'
Plugin 'rizzatti/dash.vim' "Dash.app support
Plugin 'szw/vim-g' "Google from vim by selecting a word
Plugin 'sjl/gundo.vim' " Visualize your Vim undo tree.
Bundle 'mattn/webapi-vim'
Bundle 'mattn/gist-vim'
Plugin 'terryma/vim-smooth-scroll' "Smooths the scrolling in Vim
Plugin 'christoomey/vim-titlecase'
Plugin 'polm/github-tasks.vim' "This plugin adds support for Github tasks, letting you turn normal markdown list entries into tasks and toggle them done or not done.
Plugin 'tommcdo/vim-exchange' "Easy text exchange operator
Plugin 'lifepillar/vim-solarized8' " My current colorscheme.

" Javascript
Plugin 'pangloss/vim-javascript'
Plugin 'wookiehangover/jshint.vim'

" Markdown
Plugin 'godlygeek/tabular'
Plugin 'tpope/vim-markdown'
Plugin 'nelstrom/vim-markdown-folding'
Plugin 'itspriddle/vim-marked'
Plugin 'davidoc/taskpaper.vim'
Plugin 'dhruvasagar/vim-table-mode'
Plugin 'amperser/proselint', {'rtp': 'plugins/vim/syntastic_proselint/'}

" PHP and Drupal
" Plugin 'arnaud-lb/vim-php-namespace' "types PHP use statements for you
Plugin 'shawncplus/phpcomplete.vim'
Plugin 'git://drupalcode.org/project/vimrc.git', {'rtp': 'bundle/vim-plugin-for-drupal/'}
Plugin 'joonty/vdebug.git'

call vundle#end()
filetype plugin indent on

"""""""""""""""""""""""""""""""""""""""
" Remapping
"""""""""""""""""""""""""""""""""""""""

" Disable arrow keys.
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

" Add line without entering insert mode.
nmap <S-Enter> O<Esc>
nmap <CR> o<Esc>

" Set leader to space bar
let mapleader = "\<Space>"

" Shortcut to rapidly Google but it only works in normal mode.
nnoremap <leader>g :Google<CR>

" remap ctrlp to leader o
nnoremap <Leader>o :CtrlP<CR>

" Remap CtrlPBuffer to leader b
nnoremap <Leader>b :CtrlPBuffer<CR>

" Remap CtrlPTag to .
nnoremap <leader>. :CtrlPTag<cr>

" Save files faster
nnoremap <Leader>w :w<CR>

" Comment mapping
nmap cm  <Plug>Commentary

" Edit vimrc and load vimrc bindings
nnoremap <leader>ev :vsp $MYVIMRC<CR>
nnoremap <leader>sv :source $MYVIMRC<CR>

" open ag.vim
nnoremap <leader>a :Ag

"""""""""""""""""""""""""""""""""""""""
" General settings
"""""""""""""""""""""""""""""""""""""""

" Use the same symbols as TextMate for tab stops and EOLs
set listchars=tab:▸\ ,eol:¬

set nocompatible                  " Must come first because it changes other options.

syntax enable                     " Turn on syntax highlighting.
filetype plugin indent on         " Turn on file type detection.

set showcmd                       " Display incomplete commands.
set showmode                      " Display the mode you're in.
set backspace=indent,eol,start    " Intuitive backspacing.
set hidden                        " Handle multiple buffers better.
set wildmenu                      " Enhanced command line completion.
set wildmode=list:longest         " Complete files like a shell.
set number                        " Show line numbers.
set ruler                         " Show cursor position.

" Better Undo History  http://shelldevel.net/post/112278835197/better-undo-history-in-vim
set undofile
set undodir=~/.vim/history
set undolevels=1000
set undoreload=10000

set incsearch                     " Highlight matches as you type.
set hlsearch                      " Highlight matches.
set ignorecase                    " Case-insensitive searching.
set smartcase                     " But case-sensitive if expression contains a capital letter.

set wrap                          " Turn on line wrapping.
set scrolloff=3                   " Show 3 lines of context around the cursor.
set title                         " Set the terminal's title
set visualbell                    " No beeping.
set noswapfile                    " No .swp files.
set nobackup                      " Don't make a backup before overwriting a file.
set directory=$HOME/.vim/tmp//,.  " Keep swap files in one location
set tabstop=2                    " Global tab width.
set shiftwidth=2                 " And again, related.
set expandtab                    " Use spaces instead of tabs
set laststatus=2                  " Show the status line all the time

" Useful status information at bottom of screen
set statusline=[%n]\ %<%.99f\ %h%w%m%r%y\ %{exists('*CapsLockStatusline')?CapsLockStatusline():''}%=%-16(\ %l,%c-%v\ %)%P

" Auto remove line end whitespace
autocmd BufWritePre * :%s/\s\+$//e

set autoindent
set smartindent
set clipboard=unnamed

" Enable text selection with the mouse in all modes.
:set mouse=a

"""""""""""""""""""""""""""""""""""""""
" CTRLP
"""""""""""""""""""""""""""""""""""""""

" Swap order of results so matches are on the top.
let g:ctrlp_match_window = 'bottom,order:ttb'

" Always open new files in new buffers.
let g:ctrlp_switch_buffer = 0
let g:ctrlp_working_path_mode = 0
let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

"""""""""""""""""""""""""""""""""""""""
" Netrw
"""""""""""""""""""""""""""""""""""""""
" Map :E to :Explore: http://stackoverflow.com/questions/14367440/map-e-to-explore-in-command-mode
command! -nargs=* -bar -bang -count=0 -complete=dir E Explore <args>

let g:netrw_liststyle=3     " tree view
let g:netrw_list_hide=netrw_gitignore#Hide()
let g:netrw_list_hide = '\(^\|\s\s\)\zs\.\S\+'
" let g:netrw_browse_split=4 " Open file in previous buffer

" Allow netrw to remove non-empty local directories
let g:netrw_localrmdir='rm -rf'

" map leader+d to toggle Netrw
nnoremap <leader>d :Lexplore<cr>
let g:netrw_winsize=20

"""""""""""""""""""""""""""""""""""""""
" Syntastic
"""""""""""""""""""""""""""""""""""""""

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_loc_list_height = 5
let g:syntastic_auto_loc_list = 0
" let g:syntastic_check_on_wq = 1

let g:syntastic_always_populate_loc_list = 1
" let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_javascript_checkers = ['eslint']

" Toggle synctastic
:command! Sd SyntasticToggleMode

""""""""""""""""""""""""""""""""""""""""
" Snipmate
""""""""""""""""""""""""""""""""""""""""
"to prevent clash with tab completion, change snippet trigger
imap <C-J> <esc>a<Plug>snipMateNextOrTrigger
smap <C-J> <Plug>snipMateNextOrTrigger

""""""""""""""""""""""""""""""""""""""""
" Smooth Scroll
""""""""""""""""""""""""""""""""""""""""
noremap <silent> <c-u> :call smooth_scroll#up(&scroll, 0, 2)<CR>
noremap <silent> <c-d> :call smooth_scroll#down(&scroll, 0, 2)<CR>
noremap <silent> <c-b> :call smooth_scroll#up(&scroll*2, 0, 4)<CR>
noremap <silent> <c-f> :call smooth_scroll#down(&scroll*2, 0, 4)<CR>

" Vdebug
""""""""""""""""""""""""""""""""""""""""

" Keymap for Vdebug
let g:vdebug_keymap = {
\    "run" : "<Leader>/",
\    "run_to_cursor" : "<Down>",
\    "step_over" : "<Up>",
\    "step_into" : "<Left>",
\    "step_out" : "<Right>",
\    "close" : "q",
\    "detach" : "<F7>",
\    "set_breakpoint" : "<Leader>p",
\    "eval_visual" : "<Leader>e"
\}

" Vdebug settings.
let g:vdebug_options = {}
let g:vdebug_options['break_on_open'] = 1
let g:vdebug_options['max_children'] = 128
let g:vdebug_options['watch_window_style'] = 'compact'

" Need to set as empty for this to work with Vagrant boxes.
let g:vdebug_options['server'] = ""

"""""""""""""""""""""""""""""""""""""""
" airline
"""""""""""""""""""""""""""""""""""""""

" Powerline Escape Fix: http://usevim.com/2013/07/24/powerline-escape-fix
if ! has('gui_running')
  set ttimeoutlen=10
  augroup FastEscape
    autocmd!
    au InsertEnter * set timeoutlen=0
    au InsertLeave * set timeoutlen=1000
  augroup END
endif

" need it for airline symbols
set encoding=utf-8

" airline settings
let g:airline#extensions#syntastic#enabled=1
let g:airline_powerline_fonts=1

if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif

" unicode symbols
let g:airline_left_sep = '»'
let g:airline_left_sep = '▶'
let g:airline_right_sep = '«'
let g:airline_right_sep = '◀'
let g:airline_symbols.linenr = '␊'
let g:airline_symbols.linenr = '␤'
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.branch = ''
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.paste = 'þ'
let g:airline_symbols.paste = '∥'
let g:airline_symbols.whitespace = 'ξ'

"""""""""""""""""""""""""""""""""""""""
" git
"""""""""""""""""""""""""""""""""""""""

" check spelling in git
autocmd filetype gitcommit setlocal spell

"""""""""""""""""""""""""""""""""""""""
" Tmux
"""""""""""""""""""""""""""""""""""""""

" zoom a vim pane, <C-w>= to re-balance
nnoremap <leader>- :wincmd _<cr>:wincmd \|<cr>
nnoremap <leader>= :wincmd =<cr>

if exists('$tmux')
  set term=screen-256color
endif

" Change Cursor shape by mode for tmux.
if exists('$TMUX')
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

" For tmux to automatically set paste and nopaste mode at the time pasting (as
" happens in VIM UI)
function! WrapForTmux(s)
  if !exists('$TMUX')
    return a:s
  endif

  let tmux_start = "\<Esc>Ptmux;"
  let tmux_end = "\<Esc>\\"

  return tmux_start . substitute(a:s, "\<Esc>", "\<Esc>\<Esc>", 'g') . tmux_end
endfunction

let &t_SI .= WrapForTmux("\<Esc>[?2004h")
let &t_EI .= WrapForTmux("\<Esc>[?2004l")

function! XTermPasteBegin()
  set pastetoggle=<Esc>[201~
  set paste
  return ""
endfunction

inoremap <special> <expr> <Esc>[200~ XTermPasteBegin()
" End fix for Tmux paste.

""""""""""""""""""""""""""""""""""""""
" Colors
""""""""""""""""""""""""""""""""""""""

syntax enable
set background=dark
colorscheme solarized8_dark_low
let g:solarized_termcolors=256
let g:solarized_visibility="high"
let g:solarized_diffmode="high"

" Toggle between light and dark themes
nnoremap  <leader>B :<c-u>exe "colors" (g:colors_name =~# "dark"
    \ ? substitute(g:colors_name, 'dark', 'light', '')
    \ : substitute(g:colors_name, 'light', 'dark', '')
    \ )<cr>

let g:airline_theme='solarized'

"""""""""""""""""""""""""""""""""""""""
" Line coloring
"""""""""""""""""""""""""""""""""""""""

set cursorline

" set cursorline colors
" highlight cursorline term=bold cterm=NONE ctermbg=white ctermfg=none

" Set color of number column on cursorline
highlight cursorlinenr ctermbg=235 ctermfg=white

" Highlights the current line number.
highlight linenr term=bold cterm=none ctermfg=darkgrey ctermbg=none gui=none guifg=darkgrey

set number                     " Show current line number
set relativenumber             " Show relative line numbers

" Let me know when I've went over 80 characters.
" au BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%>80v.\+', -1)
" set textwidth=80
" set colorcolumn=+1

"""""""""""""""""""""""""""""""""""""""
" Misc
"""""""""""""""""""""""""""""""""""""""

" turn off autohide of quotes in json-vim.
let g:vim_json_syntax_conceal = 0

" Custom wrap command.
command! -nargs=* Wrap set wrap linebreak nolist

"""""""""""""""""""""""""""""""""""""""
" Markdown
"""""""""""""""""""""""""""""""""""""""
let g:syntastic_markdown_checkers = ['proselint']
let g:table_mode_corner=" "
let g:marked_app = "marked 2"
autocmd bufnewfile,bufreadpost *.md set filetype=markdown
autocmd filetype markdown call Setmarkdownoptions()
function! Setmarkdownoptions()
  set showmode
  " enable spellcheck.
  set spell spelllang=en_us
  " wrap text (without linebreak charecters)
  " i don't want to highlight the current line.
  highlight cursorline ctermbg=none
endfunction
let g:vim_markdown_new_list_item_indent = 2
let g:markdown_fenced_languages = ['php', 'css', 'sass', 'javascript', 'js=javascript', 'json=javascript', 'bash=sh', 'html']

"""""""""""""""""""""""""""""""""""""""
" Folding settings
"""""""""""""""""""""""""""""""""""""""

set foldmethod=indent            "fold based on indent
set foldnestmax=1               "deepest fold is 10 levels
set nofoldenable                 "dont fold by default
set foldlevel=1                  "this is just what i use

""""""""""""""""""""""""""""""""""""""
" tab mappings
""""""""""""""""""""""""""""""""""""""

map <leader>tt :tabnew<cr>
map <leader>te :tabedit
map <leader>tc :tabclose<cr>
map <leader>to :tabonly<cr>
map <leader>tn :tabnext<cr>
map <leader>tp :tabprevious<cr>
map <leader>tf :tabfirst<cr>
map <leader>tl :tablast<cr>
map <leader>tm :tabmove

"""""""""""""""""""""""""""""""""""""
" splits
"""""""""""""""""""""""""""""""""""""

" open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright

" resize splits with mouse.
set ttymouse=xterm2

"""""""""""""""""""""""""""""""""""""
" Make arrowkey resize viewports
" To resize the split by 1 use Left,Right,Up,Down
" To resize by 50% of the split use <C-w>Left,Right,Up,Down
"""""""""""""""""""""""""""""""""""""

nnoremap <Left> :vertical resize +1<CR>
nnoremap <Right> :vertical resize -1<CR>
nnoremap <Up> :resize +1<CR>
nnoremap <Down> :resize -1<CR>
nnoremap <C-w><Right> :exe "vertical resize +" . (winwidth(0) * 1/2)<CR>
nnoremap <C-w><Left> :exe "vertical resize -" . (winwidth(0) * 1/2)<CR>
nnoremap <C-w><Up> :exe "resize +" . (winheight(0) * 1/2)<CR>
nnoremap <C-w><Down> :exe "resize -" . (winheight(0) * 1/2)<CR>

"""""""""""""""""""""""""""""""""""""""
" Javascript
"""""""""""""""""""""""""""""""""""""""
" Enables syntax highlighting for JSDocs.
let g:javascript_plugin_jsdoc = 1


"""""""""""""""""""""""""""""""""""""""
" PHP
"""""""""""""""""""""""""""""""""""""""
function! IPhpInsertUse()
    call PhpInsertUse()
    call feedkeys('a',  'n')
endfunction
autocmd FileType php inoremap <Leader>cu <Esc>:call IPhpInsertUse()<CR>
autocmd FileType php noremap <Leader>cu :call PhpInsertUse()<CR>

"""""""""""""""""""""""""""""""""""""""
" Drupal
"""""""""""""""""""""""""""""""""""""""

" syntastic drupal coding standards
let g:syntastic_php_phpcs_args="--standard=drupal --extensions='php,module,inc,install,test,profile,theme,info' --ignore='*.features.*.inc'"

if has("autocmd")
  " Drupal *.module and *.install files.
  augroup module
    autocmd BufRead,BufNewFile *.module set filetype=php
    autocmd BufRead,BufNewFile *.install set filetype=php
    autocmd BufRead,BufNewFile *.test set filetype=php
    autocmd BufRead,BufNewFile *.inc set filetype=php
    autocmd BufRead,BufNewFile *.profile set filetype=php
    autocmd BufRead,BufNewFile *.view set filetype=php
  augroup END

  " Omnicompletion with PHPcomplete
  autocmd FileType php set omnifunc=phpcomplete#CompletePHP
endif

"""""""""""""""""""""""""""""""""""""""
" Gist settings
"""""""""""""""""""""""""""""""""""""""

" Detect filetype from the filename.
let g:gist_detect_filetype = 1

" Open browser after the post.
let g:gist_open_browser_after_post = 1

"""""""""""""""""""""""""""""""""""""""
" Vimrc settings
"""""""""""""""""""""""""""""""""""""""

" Automatically reload vimrc when it's saved.
augroup myvimrc
    au!
    au BufWritePost .vimrc,_vimrc,vimrc,.gvimrc,_gvimrc,gvimrc so $MYVIMRC | if has('gui_running') | so $MYGVIMRC | endif
augroup END

" Include local vim settings.
let $LOCALFILE=expand('~/.vimrc-private')
if filereadable($LOCALFILE)
    source $LOCALFILE
endif
